package usecase

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	auth "yalc/auth-service/domain/auth"
	user "yalc/auth-service/domain/user"
	"yalc/auth-service/module/config"
	repository "yalc/auth-service/repository"

	oauth2_module "yalc/auth-service/module/oauth2"

	oauth2 "golang.org/x/oauth2"
	v2 "google.golang.org/api/oauth2/v2"

	"go.uber.org/fx"
)

type (
	GoogleOAuthLoginUsecase interface {
		// Provider returns the oauth2 provider
		GetProvider() *oauth2_module.GoogleProvider

		// GetRedirectURL returns the URL to redirect the user to for authorization.
		GetRedirectURL(state string) string

		// FetchUserInfo returns the user info from the oauth2 provider
		FetchUserInfoFromProvider(ctx context.Context, code string) (*auth.GoogleOAuthUserInfo, error)

		// UserInfoFromStore gets the user info from the store
		FetchUserInfoFromStore(ctx context.Context, ownerId string) (*auth.GoogleOAuthUserInfo, error)

		// SaveUser saves or updates a user in your system
		SaveUser(ctx context.Context, info *user.User) error

		// Exchange converts an authorization code into a token.
		Exchange(ctx context.Context, code string) (*oauth2.Token, error)

		CreateAccessToken(user *user.User, secret string, expiry time.Duration) (accessToken string, err error)
		CreateRefreshToken(user *user.User, secret string, expiry time.Duration) (refreshToken string, err error)

		// UpdateAccessToken updates a user's token in the store
		UpdateAccessToken(token *oauth2.Token, userInfo *auth.GoogleOAuthUserInfo) error
		// UpdateRefreshToken updates a user's token in the store
		UpdateRefreshToken(token *oauth2.Token, userInfo *auth.GoogleOAuthUserInfo) error
	}

	googleOAuthLoginUsecase struct {
		config          *config.Config
		tokenRepository repository.TokenRepository
		contextTimeout  time.Duration

		Provider *oauth2_module.GoogleProvider
		Client   *http.Client
	}

	Param struct {
		fx.In

		Config          *config.Config
		TokenRepository repository.TokenRepository
	}
)

func NewGoogleOAuthLoginUsecase(p Param) GoogleOAuthLoginUsecase {
	return &googleOAuthLoginUsecase{
		contextTimeout:  time.Millisecond * time.Duration(1000),
		config:          p.Config,
		tokenRepository: p.TokenRepository,
		Provider: oauth2_module.NewGoogleProvider(
			p.Config.OAuth2.Provider.Google.ClientID,
			p.Config.OAuth2.Provider.Google.ClientSecret,
			p.Config.OAuth2.Provider.Google.RedirectURL,
		),
	}
}

func (lu *googleOAuthLoginUsecase) GetProvider() *oauth2_module.GoogleProvider {
	return lu.Provider
}

func (lu *googleOAuthLoginUsecase) FetchUserInfoFromProvider(ctx context.Context, at string) (*auth.GoogleOAuthUserInfo, error) {
	// create a new http client with the google token
	lu.Client = lu.Provider.Client(ctx, &oauth2.Token{
		AccessToken: at,
	})

	return lu.fetchGoogleUserInfo(ctx)
}

func (lu *googleOAuthLoginUsecase) FetchUserInfoFromStore(ctx context.Context, ownerId string) (*auth.GoogleOAuthUserInfo, error) {
	// get all tokens from the owner
	tokens, err := lu.tokenRepository.GetAllFromOwner(ctx, ownerId)
	if err != nil {
		return nil, err
	}
	// get the google access token
	var googleToken *auth.OAuthToken
	for _, token := range tokens {
		if token.Provider == "google" && token.Type == auth.AccessToken {
			googleToken = &token
			break
		}
	}
	// if the google token is not found, return an error
	if googleToken == nil {
		return nil, &auth.ErrTokenNotFound{
			OwnerID:  ownerId,
			Provider: "google",
		}
	}
	// create a new http client with the google token
	lu.Client = lu.Provider.Client(ctx, &oauth2.Token{
		AccessToken: googleToken.Value,
	})

	// get the user info from google
	return lu.fetchGoogleUserInfo(ctx)

}

func (lu *googleOAuthLoginUsecase) GetRedirectURL(state string) string {
	return lu.Provider.AuthCodeURL(state)
}

func (lu *googleOAuthLoginUsecase) Exchange(ctx context.Context, code string) (*oauth2.Token, error) {
	return lu.Provider.Exchange(ctx, code)
}

func (lu *googleOAuthLoginUsecase) SaveUser(ctx context.Context, info *user.User) error {
	return nil
}

func (lu *googleOAuthLoginUsecase) UpdateAccessToken(token *oauth2.Token, userInfo *auth.GoogleOAuthUserInfo) error {
	return lu.tokenRepository.Update(context.Background(), auth.OAuthToken{
		OwnerID:  userInfo.Email,
		Provider: "google",
		Type:     auth.AccessToken,
		Value:    token.AccessToken,
	})
}

func (lu *googleOAuthLoginUsecase) UpdateRefreshToken(token *oauth2.Token, userInfo *auth.GoogleOAuthUserInfo) error {
	return lu.tokenRepository.Update(context.Background(), auth.OAuthToken{
		OwnerID:  userInfo.Email,
		Provider: "google",
		Type:     auth.RefreshToken,
		Value:    token.RefreshToken,
	})
}

// Generate a custom access token different from the one generated by the oauth2 provider.
// Main use case is to add custom claims to the token for custom business logic.
func (lu *googleOAuthLoginUsecase) CreateAccessToken(user *user.User, secret string, expiry time.Duration) (accessToken string, err error) {
	return "", nil
}

// Generate a custom refresh token different from the one generated by the oauth2 provider.
func (lu *googleOAuthLoginUsecase) CreateRefreshToken(user *user.User, secret string, expiry time.Duration) (refreshToken string, err error) {
	return "", nil
}

func (lu *googleOAuthLoginUsecase) fetchGoogleUserInfo(ctx context.Context) (*auth.GoogleOAuthUserInfo, error) {
	resp, err := lu.Client.Get("https://www.googleapis.com/oauth2/v2/userinfo")
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to fetch user info: status code %d", resp.StatusCode)
	}

	var userInfo *v2.Userinfo
	if err := json.NewDecoder(resp.Body).Decode(&userInfo); err != nil {
		return nil, err
	}

	return &auth.GoogleOAuthUserInfo{
		Userinfo: userInfo,
	}, nil
}
