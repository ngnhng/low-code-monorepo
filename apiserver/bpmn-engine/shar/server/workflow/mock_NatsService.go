// Code generated by mockery v2.41.0. DO NOT EDIT.

package workflow

import (
	context "context"

	common "gitlab.com/shar-workflow/shar/common"

	mock "github.com/stretchr/testify/mock"

	model "gitlab.com/shar-workflow/shar/model"

	services "gitlab.com/shar-workflow/shar/server/services"

	storage "gitlab.com/shar-workflow/shar/server/services/storage"
)

// MockNatsService is an autogenerated mock type for the NatsService type
type MockNatsService struct {
	mock.Mock
}

type MockNatsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNatsService) EXPECT() *MockNatsService_Expecter {
	return &MockNatsService_Expecter{mock: &_m.Mock}
}

// CheckProcessTaskDeprecation provides a mock function with given fields: ctx, workflow, processName
func (_m *MockNatsService) CheckProcessTaskDeprecation(ctx context.Context, workflow *model.Workflow, processName string) error {
	ret := _m.Called(ctx, workflow, processName)

	if len(ret) == 0 {
		panic("no return value specified for CheckProcessTaskDeprecation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Workflow, string) error); ok {
		r0 = rf(ctx, workflow, processName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_CheckProcessTaskDeprecation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckProcessTaskDeprecation'
type MockNatsService_CheckProcessTaskDeprecation_Call struct {
	*mock.Call
}

// CheckProcessTaskDeprecation is a helper method to define mock.On call
//   - ctx context.Context
//   - workflow *model.Workflow
//   - processName string
func (_e *MockNatsService_Expecter) CheckProcessTaskDeprecation(ctx interface{}, workflow interface{}, processName interface{}) *MockNatsService_CheckProcessTaskDeprecation_Call {
	return &MockNatsService_CheckProcessTaskDeprecation_Call{Call: _e.mock.On("CheckProcessTaskDeprecation", ctx, workflow, processName)}
}

func (_c *MockNatsService_CheckProcessTaskDeprecation_Call) Run(run func(ctx context.Context, workflow *model.Workflow, processName string)) *MockNatsService_CheckProcessTaskDeprecation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Workflow), args[2].(string))
	})
	return _c
}

func (_c *MockNatsService_CheckProcessTaskDeprecation_Call) Return(_a0 error) *MockNatsService_CheckProcessTaskDeprecation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_CheckProcessTaskDeprecation_Call) RunAndReturn(run func(context.Context, *model.Workflow, string) error) *MockNatsService_CheckProcessTaskDeprecation_Call {
	_c.Call.Return(run)
	return _c
}

// CloseUserTask provides a mock function with given fields: ctx, trackingID
func (_m *MockNatsService) CloseUserTask(ctx context.Context, trackingID string) error {
	ret := _m.Called(ctx, trackingID)

	if len(ret) == 0 {
		panic("no return value specified for CloseUserTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trackingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_CloseUserTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseUserTask'
type MockNatsService_CloseUserTask_Call struct {
	*mock.Call
}

// CloseUserTask is a helper method to define mock.On call
//   - ctx context.Context
//   - trackingID string
func (_e *MockNatsService_Expecter) CloseUserTask(ctx interface{}, trackingID interface{}) *MockNatsService_CloseUserTask_Call {
	return &MockNatsService_CloseUserTask_Call{Call: _e.mock.On("CloseUserTask", ctx, trackingID)}
}

func (_c *MockNatsService_CloseUserTask_Call) Run(run func(ctx context.Context, trackingID string)) *MockNatsService_CloseUserTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_CloseUserTask_Call) Return(_a0 error) *MockNatsService_CloseUserTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_CloseUserTask_Call) RunAndReturn(run func(context.Context, string) error) *MockNatsService_CloseUserTask_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function with given fields:
func (_m *MockNatsService) Conn() common.NatsConn {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 common.NatsConn
	if rf, ok := ret.Get(0).(func() common.NatsConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NatsConn)
		}
	}

	return r0
}

// MockNatsService_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type MockNatsService_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *MockNatsService_Expecter) Conn() *MockNatsService_Conn_Call {
	return &MockNatsService_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *MockNatsService_Conn_Call) Run(run func()) *MockNatsService_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNatsService_Conn_Call) Return(_a0 common.NatsConn) *MockNatsService_Conn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_Conn_Call) RunAndReturn(run func() common.NatsConn) *MockNatsService_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// CreateExecution provides a mock function with given fields: ctx, wfInstance
func (_m *MockNatsService) CreateExecution(ctx context.Context, wfInstance *model.Execution) (*model.Execution, error) {
	ret := _m.Called(ctx, wfInstance)

	if len(ret) == 0 {
		panic("no return value specified for CreateExecution")
	}

	var r0 *model.Execution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Execution) (*model.Execution, error)); ok {
		return rf(ctx, wfInstance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Execution) *model.Execution); ok {
		r0 = rf(ctx, wfInstance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Execution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Execution) error); ok {
		r1 = rf(ctx, wfInstance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_CreateExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExecution'
type MockNatsService_CreateExecution_Call struct {
	*mock.Call
}

// CreateExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - wfInstance *model.Execution
func (_e *MockNatsService_Expecter) CreateExecution(ctx interface{}, wfInstance interface{}) *MockNatsService_CreateExecution_Call {
	return &MockNatsService_CreateExecution_Call{Call: _e.mock.On("CreateExecution", ctx, wfInstance)}
}

func (_c *MockNatsService_CreateExecution_Call) Run(run func(ctx context.Context, wfInstance *model.Execution)) *MockNatsService_CreateExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Execution))
	})
	return _c
}

func (_c *MockNatsService_CreateExecution_Call) Return(_a0 *model.Execution, _a1 error) *MockNatsService_CreateExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_CreateExecution_Call) RunAndReturn(run func(context.Context, *model.Execution) (*model.Execution, error)) *MockNatsService_CreateExecution_Call {
	_c.Call.Return(run)
	return _c
}

// CreateJob provides a mock function with given fields: ctx, job
func (_m *MockNatsService) CreateJob(ctx context.Context, job *model.WorkflowState) (string, error) {
	ret := _m.Called(ctx, job)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) (string, error)); ok {
		return rf(ctx, job)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) string); ok {
		r0 = rf(ctx, job)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.WorkflowState) error); ok {
		r1 = rf(ctx, job)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_CreateJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJob'
type MockNatsService_CreateJob_Call struct {
	*mock.Call
}

// CreateJob is a helper method to define mock.On call
//   - ctx context.Context
//   - job *model.WorkflowState
func (_e *MockNatsService_Expecter) CreateJob(ctx interface{}, job interface{}) *MockNatsService_CreateJob_Call {
	return &MockNatsService_CreateJob_Call{Call: _e.mock.On("CreateJob", ctx, job)}
}

func (_c *MockNatsService_CreateJob_Call) Run(run func(ctx context.Context, job *model.WorkflowState)) *MockNatsService_CreateJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_CreateJob_Call) Return(_a0 string, _a1 error) *MockNatsService_CreateJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_CreateJob_Call) RunAndReturn(run func(context.Context, *model.WorkflowState) (string, error)) *MockNatsService_CreateJob_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProcessInstance provides a mock function with given fields: ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId
func (_m *MockNatsService) CreateProcessInstance(ctx context.Context, workflowInstanceID string, parentProcessID string, parentElementID string, processName string, workflowName string, workflowId string) (*model.ProcessInstance, error) {
	ret := _m.Called(ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)

	if len(ret) == 0 {
		panic("no return value specified for CreateProcessInstance")
	}

	var r0 *model.ProcessInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) (*model.ProcessInstance, error)); ok {
		return rf(ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string, string) *model.ProcessInstance); ok {
		r0 = rf(ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProcessInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string, string) error); ok {
		r1 = rf(ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_CreateProcessInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProcessInstance'
type MockNatsService_CreateProcessInstance_Call struct {
	*mock.Call
}

// CreateProcessInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowInstanceID string
//   - parentProcessID string
//   - parentElementID string
//   - processName string
//   - workflowName string
//   - workflowId string
func (_e *MockNatsService_Expecter) CreateProcessInstance(ctx interface{}, workflowInstanceID interface{}, parentProcessID interface{}, parentElementID interface{}, processName interface{}, workflowName interface{}, workflowId interface{}) *MockNatsService_CreateProcessInstance_Call {
	return &MockNatsService_CreateProcessInstance_Call{Call: _e.mock.On("CreateProcessInstance", ctx, workflowInstanceID, parentProcessID, parentElementID, processName, workflowName, workflowId)}
}

func (_c *MockNatsService_CreateProcessInstance_Call) Run(run func(ctx context.Context, workflowInstanceID string, parentProcessID string, parentElementID string, processName string, workflowName string, workflowId string)) *MockNatsService_CreateProcessInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string))
	})
	return _c
}

func (_c *MockNatsService_CreateProcessInstance_Call) Return(_a0 *model.ProcessInstance, _a1 error) *MockNatsService_CreateProcessInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_CreateProcessInstance_Call) RunAndReturn(run func(context.Context, string, string, string, string, string, string) (*model.ProcessInstance, error)) *MockNatsService_CreateProcessInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteJob provides a mock function with given fields: ctx, trackingID
func (_m *MockNatsService) DeleteJob(ctx context.Context, trackingID string) error {
	ret := _m.Called(ctx, trackingID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, trackingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_DeleteJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteJob'
type MockNatsService_DeleteJob_Call struct {
	*mock.Call
}

// DeleteJob is a helper method to define mock.On call
//   - ctx context.Context
//   - trackingID string
func (_e *MockNatsService_Expecter) DeleteJob(ctx interface{}, trackingID interface{}) *MockNatsService_DeleteJob_Call {
	return &MockNatsService_DeleteJob_Call{Call: _e.mock.On("DeleteJob", ctx, trackingID)}
}

func (_c *MockNatsService_DeleteJob_Call) Run(run func(ctx context.Context, trackingID string)) *MockNatsService_DeleteJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_DeleteJob_Call) Return(_a0 error) *MockNatsService_DeleteJob_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_DeleteJob_Call) RunAndReturn(run func(context.Context, string) error) *MockNatsService_DeleteJob_Call {
	_c.Call.Return(run)
	return _c
}

// DestroyProcessInstance provides a mock function with given fields: ctx, state, pi, wi
func (_m *MockNatsService) DestroyProcessInstance(ctx context.Context, state *model.WorkflowState, pi *model.ProcessInstance, wi *model.Execution) error {
	ret := _m.Called(ctx, state, pi, wi)

	if len(ret) == 0 {
		panic("no return value specified for DestroyProcessInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState, *model.ProcessInstance, *model.Execution) error); ok {
		r0 = rf(ctx, state, pi, wi)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_DestroyProcessInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DestroyProcessInstance'
type MockNatsService_DestroyProcessInstance_Call struct {
	*mock.Call
}

// DestroyProcessInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
//   - pi *model.ProcessInstance
//   - wi *model.Execution
func (_e *MockNatsService_Expecter) DestroyProcessInstance(ctx interface{}, state interface{}, pi interface{}, wi interface{}) *MockNatsService_DestroyProcessInstance_Call {
	return &MockNatsService_DestroyProcessInstance_Call{Call: _e.mock.On("DestroyProcessInstance", ctx, state, pi, wi)}
}

func (_c *MockNatsService_DestroyProcessInstance_Call) Run(run func(ctx context.Context, state *model.WorkflowState, pi *model.ProcessInstance, wi *model.Execution)) *MockNatsService_DestroyProcessInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState), args[2].(*model.ProcessInstance), args[3].(*model.Execution))
	})
	return _c
}

func (_c *MockNatsService_DestroyProcessInstance_Call) Return(_a0 error) *MockNatsService_DestroyProcessInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_DestroyProcessInstance_Call) RunAndReturn(run func(context.Context, *model.WorkflowState, *model.ProcessInstance, *model.Execution) error) *MockNatsService_DestroyProcessInstance_Call {
	_c.Call.Return(run)
	return _c
}

// EnsureServiceTaskConsumer provides a mock function with given fields: ctx, uid
func (_m *MockNatsService) EnsureServiceTaskConsumer(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for EnsureServiceTaskConsumer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_EnsureServiceTaskConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EnsureServiceTaskConsumer'
type MockNatsService_EnsureServiceTaskConsumer_Call struct {
	*mock.Call
}

// EnsureServiceTaskConsumer is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockNatsService_Expecter) EnsureServiceTaskConsumer(ctx interface{}, uid interface{}) *MockNatsService_EnsureServiceTaskConsumer_Call {
	return &MockNatsService_EnsureServiceTaskConsumer_Call{Call: _e.mock.On("EnsureServiceTaskConsumer", ctx, uid)}
}

func (_c *MockNatsService_EnsureServiceTaskConsumer_Call) Run(run func(ctx context.Context, uid string)) *MockNatsService_EnsureServiceTaskConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_EnsureServiceTaskConsumer_Call) Return(_a0 error) *MockNatsService_EnsureServiceTaskConsumer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_EnsureServiceTaskConsumer_Call) RunAndReturn(run func(context.Context, string) error) *MockNatsService_EnsureServiceTaskConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// GetElement provides a mock function with given fields: ctx, state
func (_m *MockNatsService) GetElement(ctx context.Context, state *model.WorkflowState) (*model.Element, error) {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for GetElement")
	}

	var r0 *model.Element
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) (*model.Element, error)); ok {
		return rf(ctx, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) *model.Element); ok {
		r0 = rf(ctx, state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Element)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.WorkflowState) error); ok {
		r1 = rf(ctx, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetElement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetElement'
type MockNatsService_GetElement_Call struct {
	*mock.Call
}

// GetElement is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) GetElement(ctx interface{}, state interface{}) *MockNatsService_GetElement_Call {
	return &MockNatsService_GetElement_Call{Call: _e.mock.On("GetElement", ctx, state)}
}

func (_c *MockNatsService_GetElement_Call) Run(run func(ctx context.Context, state *model.WorkflowState)) *MockNatsService_GetElement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_GetElement_Call) Return(_a0 *model.Element, _a1 error) *MockNatsService_GetElement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetElement_Call) RunAndReturn(run func(context.Context, *model.WorkflowState) (*model.Element, error)) *MockNatsService_GetElement_Call {
	_c.Call.Return(run)
	return _c
}

// GetExecution provides a mock function with given fields: ctx, workflowInstanceID
func (_m *MockNatsService) GetExecution(ctx context.Context, workflowInstanceID string) (*model.Execution, error) {
	ret := _m.Called(ctx, workflowInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetExecution")
	}

	var r0 *model.Execution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Execution, error)); ok {
		return rf(ctx, workflowInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Execution); ok {
		r0 = rf(ctx, workflowInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Execution)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetExecution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExecution'
type MockNatsService_GetExecution_Call struct {
	*mock.Call
}

// GetExecution is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowInstanceID string
func (_e *MockNatsService_Expecter) GetExecution(ctx interface{}, workflowInstanceID interface{}) *MockNatsService_GetExecution_Call {
	return &MockNatsService_GetExecution_Call{Call: _e.mock.On("GetExecution", ctx, workflowInstanceID)}
}

func (_c *MockNatsService_GetExecution_Call) Run(run func(ctx context.Context, workflowInstanceID string)) *MockNatsService_GetExecution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetExecution_Call) Return(_a0 *model.Execution, _a1 error) *MockNatsService_GetExecution_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetExecution_Call) RunAndReturn(run func(context.Context, string) (*model.Execution, error)) *MockNatsService_GetExecution_Call {
	_c.Call.Return(run)
	return _c
}

// GetGatewayInstance provides a mock function with given fields: ctx, gatewayInstanceID
func (_m *MockNatsService) GetGatewayInstance(ctx context.Context, gatewayInstanceID string) (*model.Gateway, error) {
	ret := _m.Called(ctx, gatewayInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayInstance")
	}

	var r0 *model.Gateway
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Gateway, error)); ok {
		return rf(ctx, gatewayInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Gateway); ok {
		r0 = rf(ctx, gatewayInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Gateway)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, gatewayInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetGatewayInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewayInstance'
type MockNatsService_GetGatewayInstance_Call struct {
	*mock.Call
}

// GetGatewayInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayInstanceID string
func (_e *MockNatsService_Expecter) GetGatewayInstance(ctx interface{}, gatewayInstanceID interface{}) *MockNatsService_GetGatewayInstance_Call {
	return &MockNatsService_GetGatewayInstance_Call{Call: _e.mock.On("GetGatewayInstance", ctx, gatewayInstanceID)}
}

func (_c *MockNatsService_GetGatewayInstance_Call) Run(run func(ctx context.Context, gatewayInstanceID string)) *MockNatsService_GetGatewayInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetGatewayInstance_Call) Return(_a0 *model.Gateway, _a1 error) *MockNatsService_GetGatewayInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetGatewayInstance_Call) RunAndReturn(run func(context.Context, string) (*model.Gateway, error)) *MockNatsService_GetGatewayInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetGatewayInstanceID provides a mock function with given fields: state
func (_m *MockNatsService) GetGatewayInstanceID(state *model.WorkflowState) (string, string, error) {
	ret := _m.Called(state)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayInstanceID")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.WorkflowState) (string, string, error)); ok {
		return rf(state)
	}
	if rf, ok := ret.Get(0).(func(*model.WorkflowState) string); ok {
		r0 = rf(state)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*model.WorkflowState) string); ok {
		r1 = rf(state)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*model.WorkflowState) error); ok {
		r2 = rf(state)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNatsService_GetGatewayInstanceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewayInstanceID'
type MockNatsService_GetGatewayInstanceID_Call struct {
	*mock.Call
}

// GetGatewayInstanceID is a helper method to define mock.On call
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) GetGatewayInstanceID(state interface{}) *MockNatsService_GetGatewayInstanceID_Call {
	return &MockNatsService_GetGatewayInstanceID_Call{Call: _e.mock.On("GetGatewayInstanceID", state)}
}

func (_c *MockNatsService_GetGatewayInstanceID_Call) Run(run func(state *model.WorkflowState)) *MockNatsService_GetGatewayInstanceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_GetGatewayInstanceID_Call) Return(_a0 string, _a1 string, _a2 error) *MockNatsService_GetGatewayInstanceID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNatsService_GetGatewayInstanceID_Call) RunAndReturn(run func(*model.WorkflowState) (string, string, error)) *MockNatsService_GetGatewayInstanceID_Call {
	_c.Call.Return(run)
	return _c
}

// GetJob provides a mock function with given fields: ctx, id
func (_m *MockNatsService) GetJob(ctx context.Context, id string) (*model.WorkflowState, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *model.WorkflowState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.WorkflowState, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.WorkflowState); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkflowState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJob'
type MockNatsService_GetJob_Call struct {
	*mock.Call
}

// GetJob is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNatsService_Expecter) GetJob(ctx interface{}, id interface{}) *MockNatsService_GetJob_Call {
	return &MockNatsService_GetJob_Call{Call: _e.mock.On("GetJob", ctx, id)}
}

func (_c *MockNatsService_GetJob_Call) Run(run func(ctx context.Context, id string)) *MockNatsService_GetJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetJob_Call) Return(_a0 *model.WorkflowState, _a1 error) *MockNatsService_GetJob_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetJob_Call) RunAndReturn(run func(context.Context, string) (*model.WorkflowState, error)) *MockNatsService_GetJob_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestVersion provides a mock function with given fields: ctx, workflowName
func (_m *MockNatsService) GetLatestVersion(ctx context.Context, workflowName string) (string, error) {
	ret := _m.Called(ctx, workflowName)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, workflowName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, workflowName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetLatestVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestVersion'
type MockNatsService_GetLatestVersion_Call struct {
	*mock.Call
}

// GetLatestVersion is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowName string
func (_e *MockNatsService_Expecter) GetLatestVersion(ctx interface{}, workflowName interface{}) *MockNatsService_GetLatestVersion_Call {
	return &MockNatsService_GetLatestVersion_Call{Call: _e.mock.On("GetLatestVersion", ctx, workflowName)}
}

func (_c *MockNatsService_GetLatestVersion_Call) Run(run func(ctx context.Context, workflowName string)) *MockNatsService_GetLatestVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetLatestVersion_Call) Return(_a0 string, _a1 error) *MockNatsService_GetLatestVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetLatestVersion_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockNatsService_GetLatestVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldState provides a mock function with given fields: ctx, id
func (_m *MockNatsService) GetOldState(ctx context.Context, id string) (*model.WorkflowState, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOldState")
	}

	var r0 *model.WorkflowState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.WorkflowState, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.WorkflowState); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkflowState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetOldState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldState'
type MockNatsService_GetOldState_Call struct {
	*mock.Call
}

// GetOldState is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNatsService_Expecter) GetOldState(ctx interface{}, id interface{}) *MockNatsService_GetOldState_Call {
	return &MockNatsService_GetOldState_Call{Call: _e.mock.On("GetOldState", ctx, id)}
}

func (_c *MockNatsService_GetOldState_Call) Run(run func(ctx context.Context, id string)) *MockNatsService_GetOldState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetOldState_Call) Return(_a0 *model.WorkflowState, _a1 error) *MockNatsService_GetOldState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetOldState_Call) RunAndReturn(run func(context.Context, string) (*model.WorkflowState, error)) *MockNatsService_GetOldState_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessHistory provides a mock function with given fields: ctx, processInstanceId
func (_m *MockNatsService) GetProcessHistory(ctx context.Context, processInstanceId string) ([]*model.ProcessHistoryEntry, error) {
	ret := _m.Called(ctx, processInstanceId)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessHistory")
	}

	var r0 []*model.ProcessHistoryEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*model.ProcessHistoryEntry, error)); ok {
		return rf(ctx, processInstanceId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.ProcessHistoryEntry); ok {
		r0 = rf(ctx, processInstanceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ProcessHistoryEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, processInstanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetProcessHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessHistory'
type MockNatsService_GetProcessHistory_Call struct {
	*mock.Call
}

// GetProcessHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - processInstanceId string
func (_e *MockNatsService_Expecter) GetProcessHistory(ctx interface{}, processInstanceId interface{}) *MockNatsService_GetProcessHistory_Call {
	return &MockNatsService_GetProcessHistory_Call{Call: _e.mock.On("GetProcessHistory", ctx, processInstanceId)}
}

func (_c *MockNatsService_GetProcessHistory_Call) Run(run func(ctx context.Context, processInstanceId string)) *MockNatsService_GetProcessHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetProcessHistory_Call) Return(_a0 []*model.ProcessHistoryEntry, _a1 error) *MockNatsService_GetProcessHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetProcessHistory_Call) RunAndReturn(run func(context.Context, string) ([]*model.ProcessHistoryEntry, error)) *MockNatsService_GetProcessHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessInstance provides a mock function with given fields: ctx, processInstanceID
func (_m *MockNatsService) GetProcessInstance(ctx context.Context, processInstanceID string) (*model.ProcessInstance, error) {
	ret := _m.Called(ctx, processInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for GetProcessInstance")
	}

	var r0 *model.ProcessInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.ProcessInstance, error)); ok {
		return rf(ctx, processInstanceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.ProcessInstance); ok {
		r0 = rf(ctx, processInstanceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProcessInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, processInstanceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetProcessInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessInstance'
type MockNatsService_GetProcessInstance_Call struct {
	*mock.Call
}

// GetProcessInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - processInstanceID string
func (_e *MockNatsService_Expecter) GetProcessInstance(ctx interface{}, processInstanceID interface{}) *MockNatsService_GetProcessInstance_Call {
	return &MockNatsService_GetProcessInstance_Call{Call: _e.mock.On("GetProcessInstance", ctx, processInstanceID)}
}

func (_c *MockNatsService_GetProcessInstance_Call) Run(run func(ctx context.Context, processInstanceID string)) *MockNatsService_GetProcessInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetProcessInstance_Call) Return(_a0 *model.ProcessInstance, _a1 error) *MockNatsService_GetProcessInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetProcessInstance_Call) RunAndReturn(run func(context.Context, string) (*model.ProcessInstance, error)) *MockNatsService_GetProcessInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskSpecByUID provides a mock function with given fields: ctx, uid
func (_m *MockNatsService) GetTaskSpecByUID(ctx context.Context, uid string) (*model.TaskSpec, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskSpecByUID")
	}

	var r0 *model.TaskSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.TaskSpec, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.TaskSpec); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TaskSpec)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetTaskSpecByUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskSpecByUID'
type MockNatsService_GetTaskSpecByUID_Call struct {
	*mock.Call
}

// GetTaskSpecByUID is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *MockNatsService_Expecter) GetTaskSpecByUID(ctx interface{}, uid interface{}) *MockNatsService_GetTaskSpecByUID_Call {
	return &MockNatsService_GetTaskSpecByUID_Call{Call: _e.mock.On("GetTaskSpecByUID", ctx, uid)}
}

func (_c *MockNatsService_GetTaskSpecByUID_Call) Run(run func(ctx context.Context, uid string)) *MockNatsService_GetTaskSpecByUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetTaskSpecByUID_Call) Return(_a0 *model.TaskSpec, _a1 error) *MockNatsService_GetTaskSpecByUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetTaskSpecByUID_Call) RunAndReturn(run func(context.Context, string) (*model.TaskSpec, error)) *MockNatsService_GetTaskSpecByUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskSpecUID provides a mock function with given fields: ctx, name
func (_m *MockNatsService) GetTaskSpecUID(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskSpecUID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetTaskSpecUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskSpecUID'
type MockNatsService_GetTaskSpecUID_Call struct {
	*mock.Call
}

// GetTaskSpecUID is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockNatsService_Expecter) GetTaskSpecUID(ctx interface{}, name interface{}) *MockNatsService_GetTaskSpecUID_Call {
	return &MockNatsService_GetTaskSpecUID_Call{Call: _e.mock.On("GetTaskSpecUID", ctx, name)}
}

func (_c *MockNatsService_GetTaskSpecUID_Call) Run(run func(ctx context.Context, name string)) *MockNatsService_GetTaskSpecUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetTaskSpecUID_Call) Return(_a0 string, _a1 error) *MockNatsService_GetTaskSpecUID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetTaskSpecUID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockNatsService_GetTaskSpecUID_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflow provides a mock function with given fields: ctx, workflowID
func (_m *MockNatsService) GetWorkflow(ctx context.Context, workflowID string) (*model.Workflow, error) {
	ret := _m.Called(ctx, workflowID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *model.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Workflow, error)); ok {
		return rf(ctx, workflowID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Workflow); ok {
		r0 = rf(ctx, workflowID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflow'
type MockNatsService_GetWorkflow_Call struct {
	*mock.Call
}

// GetWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowID string
func (_e *MockNatsService_Expecter) GetWorkflow(ctx interface{}, workflowID interface{}) *MockNatsService_GetWorkflow_Call {
	return &MockNatsService_GetWorkflow_Call{Call: _e.mock.On("GetWorkflow", ctx, workflowID)}
}

func (_c *MockNatsService_GetWorkflow_Call) Run(run func(ctx context.Context, workflowID string)) *MockNatsService_GetWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetWorkflow_Call) Return(_a0 *model.Workflow, _a1 error) *MockNatsService_GetWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetWorkflow_Call) RunAndReturn(run func(context.Context, string) (*model.Workflow, error)) *MockNatsService_GetWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowNameFor provides a mock function with given fields: ctx, processName
func (_m *MockNatsService) GetWorkflowNameFor(ctx context.Context, processName string) (string, error) {
	ret := _m.Called(ctx, processName)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowNameFor")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, processName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, processName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, processName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetWorkflowNameFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowNameFor'
type MockNatsService_GetWorkflowNameFor_Call struct {
	*mock.Call
}

// GetWorkflowNameFor is a helper method to define mock.On call
//   - ctx context.Context
//   - processName string
func (_e *MockNatsService_Expecter) GetWorkflowNameFor(ctx interface{}, processName interface{}) *MockNatsService_GetWorkflowNameFor_Call {
	return &MockNatsService_GetWorkflowNameFor_Call{Call: _e.mock.On("GetWorkflowNameFor", ctx, processName)}
}

func (_c *MockNatsService_GetWorkflowNameFor_Call) Run(run func(ctx context.Context, processName string)) *MockNatsService_GetWorkflowNameFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetWorkflowNameFor_Call) Return(_a0 string, _a1 error) *MockNatsService_GetWorkflowNameFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetWorkflowNameFor_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockNatsService_GetWorkflowNameFor_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowVersions provides a mock function with given fields: ctx, workflowName
func (_m *MockNatsService) GetWorkflowVersions(ctx context.Context, workflowName string) (*model.WorkflowVersions, error) {
	ret := _m.Called(ctx, workflowName)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowVersions")
	}

	var r0 *model.WorkflowVersions
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.WorkflowVersions, error)); ok {
		return rf(ctx, workflowName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.WorkflowVersions); ok {
		r0 = rf(ctx, workflowName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WorkflowVersions)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, workflowName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_GetWorkflowVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowVersions'
type MockNatsService_GetWorkflowVersions_Call struct {
	*mock.Call
}

// GetWorkflowVersions is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowName string
func (_e *MockNatsService_Expecter) GetWorkflowVersions(ctx interface{}, workflowName interface{}) *MockNatsService_GetWorkflowVersions_Call {
	return &MockNatsService_GetWorkflowVersions_Call{Call: _e.mock.On("GetWorkflowVersions", ctx, workflowName)}
}

func (_c *MockNatsService_GetWorkflowVersions_Call) Run(run func(ctx context.Context, workflowName string)) *MockNatsService_GetWorkflowVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_GetWorkflowVersions_Call) Return(_a0 *model.WorkflowVersions, _a1 error) *MockNatsService_GetWorkflowVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_GetWorkflowVersions_Call) RunAndReturn(run func(context.Context, string) (*model.WorkflowVersions, error)) *MockNatsService_GetWorkflowVersions_Call {
	_c.Call.Return(run)
	return _c
}

// Heartbeat provides a mock function with given fields: ctx, request
func (_m *MockNatsService) Heartbeat(ctx context.Context, request *model.HeartbeatRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Heartbeat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.HeartbeatRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_Heartbeat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Heartbeat'
type MockNatsService_Heartbeat_Call struct {
	*mock.Call
}

// Heartbeat is a helper method to define mock.On call
//   - ctx context.Context
//   - request *model.HeartbeatRequest
func (_e *MockNatsService_Expecter) Heartbeat(ctx interface{}, request interface{}) *MockNatsService_Heartbeat_Call {
	return &MockNatsService_Heartbeat_Call{Call: _e.mock.On("Heartbeat", ctx, request)}
}

func (_c *MockNatsService_Heartbeat_Call) Run(run func(ctx context.Context, request *model.HeartbeatRequest)) *MockNatsService_Heartbeat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.HeartbeatRequest))
	})
	return _c
}

func (_c *MockNatsService_Heartbeat_Call) Return(_a0 error) *MockNatsService_Heartbeat_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_Heartbeat_Call) RunAndReturn(run func(context.Context, *model.HeartbeatRequest) error) *MockNatsService_Heartbeat_Call {
	_c.Call.Return(run)
	return _c
}

// ListExecutionProcesses provides a mock function with given fields: ctx, id
func (_m *MockNatsService) ListExecutionProcesses(ctx context.Context, id string) ([]string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ListExecutionProcesses")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_ListExecutionProcesses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExecutionProcesses'
type MockNatsService_ListExecutionProcesses_Call struct {
	*mock.Call
}

// ListExecutionProcesses is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNatsService_Expecter) ListExecutionProcesses(ctx interface{}, id interface{}) *MockNatsService_ListExecutionProcesses_Call {
	return &MockNatsService_ListExecutionProcesses_Call{Call: _e.mock.On("ListExecutionProcesses", ctx, id)}
}

func (_c *MockNatsService_ListExecutionProcesses_Call) Run(run func(ctx context.Context, id string)) *MockNatsService_ListExecutionProcesses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_ListExecutionProcesses_Call) Return(_a0 []string, _a1 error) *MockNatsService_ListExecutionProcesses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_ListExecutionProcesses_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockNatsService_ListExecutionProcesses_Call {
	_c.Call.Return(run)
	return _c
}

// ListExecutions provides a mock function with given fields: ctx, workflowName
func (_m *MockNatsService) ListExecutions(ctx context.Context, workflowName string) (chan *model.ListExecutionItem, chan error) {
	ret := _m.Called(ctx, workflowName)

	if len(ret) == 0 {
		panic("no return value specified for ListExecutions")
	}

	var r0 chan *model.ListExecutionItem
	var r1 chan error
	if rf, ok := ret.Get(0).(func(context.Context, string) (chan *model.ListExecutionItem, chan error)); ok {
		return rf(ctx, workflowName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) chan *model.ListExecutionItem); ok {
		r0 = rf(ctx, workflowName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *model.ListExecutionItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) chan error); ok {
		r1 = rf(ctx, workflowName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}

// MockNatsService_ListExecutions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListExecutions'
type MockNatsService_ListExecutions_Call struct {
	*mock.Call
}

// ListExecutions is a helper method to define mock.On call
//   - ctx context.Context
//   - workflowName string
func (_e *MockNatsService_Expecter) ListExecutions(ctx interface{}, workflowName interface{}) *MockNatsService_ListExecutions_Call {
	return &MockNatsService_ListExecutions_Call{Call: _e.mock.On("ListExecutions", ctx, workflowName)}
}

func (_c *MockNatsService_ListExecutions_Call) Run(run func(ctx context.Context, workflowName string)) *MockNatsService_ListExecutions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_ListExecutions_Call) Return(_a0 chan *model.ListExecutionItem, _a1 chan error) *MockNatsService_ListExecutions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_ListExecutions_Call) RunAndReturn(run func(context.Context, string) (chan *model.ListExecutionItem, chan error)) *MockNatsService_ListExecutions_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflows provides a mock function with given fields: ctx
func (_m *MockNatsService) ListWorkflows(ctx context.Context) (chan *model.ListWorkflowResponse, chan error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 chan *model.ListWorkflowResponse
	var r1 chan error
	if rf, ok := ret.Get(0).(func(context.Context) (chan *model.ListWorkflowResponse, chan error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) chan *model.ListWorkflowResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *model.ListWorkflowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) chan error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(chan error)
		}
	}

	return r0, r1
}

// MockNatsService_ListWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflows'
type MockNatsService_ListWorkflows_Call struct {
	*mock.Call
}

// ListWorkflows is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNatsService_Expecter) ListWorkflows(ctx interface{}) *MockNatsService_ListWorkflows_Call {
	return &MockNatsService_ListWorkflows_Call{Call: _e.mock.On("ListWorkflows", ctx)}
}

func (_c *MockNatsService_ListWorkflows_Call) Run(run func(ctx context.Context)) *MockNatsService_ListWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNatsService_ListWorkflows_Call) Return(_a0 chan *model.ListWorkflowResponse, _a1 chan error) *MockNatsService_ListWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_ListWorkflows_Call) RunAndReturn(run func(context.Context) (chan *model.ListWorkflowResponse, chan error)) *MockNatsService_ListWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// OwnerID provides a mock function with given fields: ctx, name
func (_m *MockNatsService) OwnerID(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for OwnerID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_OwnerID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OwnerID'
type MockNatsService_OwnerID_Call struct {
	*mock.Call
}

// OwnerID is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockNatsService_Expecter) OwnerID(ctx interface{}, name interface{}) *MockNatsService_OwnerID_Call {
	return &MockNatsService_OwnerID_Call{Call: _e.mock.On("OwnerID", ctx, name)}
}

func (_c *MockNatsService_OwnerID_Call) Run(run func(ctx context.Context, name string)) *MockNatsService_OwnerID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_OwnerID_Call) Return(_a0 string, _a1 error) *MockNatsService_OwnerID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_OwnerID_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockNatsService_OwnerID_Call {
	_c.Call.Return(run)
	return _c
}

// OwnerName provides a mock function with given fields: ctx, id
func (_m *MockNatsService) OwnerName(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for OwnerName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_OwnerName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OwnerName'
type MockNatsService_OwnerName_Call struct {
	*mock.Call
}

// OwnerName is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockNatsService_Expecter) OwnerName(ctx interface{}, id interface{}) *MockNatsService_OwnerName_Call {
	return &MockNatsService_OwnerName_Call{Call: _e.mock.On("OwnerName", ctx, id)}
}

func (_c *MockNatsService_OwnerName_Call) Run(run func(ctx context.Context, id string)) *MockNatsService_OwnerName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNatsService_OwnerName_Call) Return(_a0 string, _a1 error) *MockNatsService_OwnerName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_OwnerName_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockNatsService_OwnerName_Call {
	_c.Call.Return(run)
	return _c
}

// PublishMessage provides a mock function with given fields: ctx, name, key, vars
func (_m *MockNatsService) PublishMessage(ctx context.Context, name string, key string, vars []byte) error {
	ret := _m.Called(ctx, name, key, vars)

	if len(ret) == 0 {
		panic("no return value specified for PublishMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = rf(ctx, name, key, vars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_PublishMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishMessage'
type MockNatsService_PublishMessage_Call struct {
	*mock.Call
}

// PublishMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - key string
//   - vars []byte
func (_e *MockNatsService_Expecter) PublishMessage(ctx interface{}, name interface{}, key interface{}, vars interface{}) *MockNatsService_PublishMessage_Call {
	return &MockNatsService_PublishMessage_Call{Call: _e.mock.On("PublishMessage", ctx, name, key, vars)}
}

func (_c *MockNatsService_PublishMessage_Call) Run(run func(ctx context.Context, name string, key string, vars []byte)) *MockNatsService_PublishMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *MockNatsService_PublishMessage_Call) Return(_a0 error) *MockNatsService_PublishMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_PublishMessage_Call) RunAndReturn(run func(context.Context, string, string, []byte) error) *MockNatsService_PublishMessage_Call {
	_c.Call.Return(run)
	return _c
}

// PublishWorkflowState provides a mock function with given fields: ctx, stateName, state, ops
func (_m *MockNatsService) PublishWorkflowState(ctx context.Context, stateName string, state *model.WorkflowState, ops ...storage.PublishOpt) error {
	_va := make([]interface{}, len(ops))
	for _i := range ops {
		_va[_i] = ops[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stateName, state)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishWorkflowState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.WorkflowState, ...storage.PublishOpt) error); ok {
		r0 = rf(ctx, stateName, state, ops...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_PublishWorkflowState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishWorkflowState'
type MockNatsService_PublishWorkflowState_Call struct {
	*mock.Call
}

// PublishWorkflowState is a helper method to define mock.On call
//   - ctx context.Context
//   - stateName string
//   - state *model.WorkflowState
//   - ops ...storage.PublishOpt
func (_e *MockNatsService_Expecter) PublishWorkflowState(ctx interface{}, stateName interface{}, state interface{}, ops ...interface{}) *MockNatsService_PublishWorkflowState_Call {
	return &MockNatsService_PublishWorkflowState_Call{Call: _e.mock.On("PublishWorkflowState",
		append([]interface{}{ctx, stateName, state}, ops...)...)}
}

func (_c *MockNatsService_PublishWorkflowState_Call) Run(run func(ctx context.Context, stateName string, state *model.WorkflowState, ops ...storage.PublishOpt)) *MockNatsService_PublishWorkflowState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]storage.PublishOpt, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(storage.PublishOpt)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*model.WorkflowState), variadicArgs...)
	})
	return _c
}

func (_c *MockNatsService_PublishWorkflowState_Call) Return(_a0 error) *MockNatsService_PublishWorkflowState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_PublishWorkflowState_Call) RunAndReturn(run func(context.Context, string, *model.WorkflowState, ...storage.PublishOpt) error) *MockNatsService_PublishWorkflowState_Call {
	_c.Call.Return(run)
	return _c
}

// PutTaskSpec provides a mock function with given fields: ctx, spec
func (_m *MockNatsService) PutTaskSpec(ctx context.Context, spec *model.TaskSpec) (string, error) {
	ret := _m.Called(ctx, spec)

	if len(ret) == 0 {
		panic("no return value specified for PutTaskSpec")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.TaskSpec) (string, error)); ok {
		return rf(ctx, spec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.TaskSpec) string); ok {
		r0 = rf(ctx, spec)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.TaskSpec) error); ok {
		r1 = rf(ctx, spec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_PutTaskSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutTaskSpec'
type MockNatsService_PutTaskSpec_Call struct {
	*mock.Call
}

// PutTaskSpec is a helper method to define mock.On call
//   - ctx context.Context
//   - spec *model.TaskSpec
func (_e *MockNatsService_Expecter) PutTaskSpec(ctx interface{}, spec interface{}) *MockNatsService_PutTaskSpec_Call {
	return &MockNatsService_PutTaskSpec_Call{Call: _e.mock.On("PutTaskSpec", ctx, spec)}
}

func (_c *MockNatsService_PutTaskSpec_Call) Run(run func(ctx context.Context, spec *model.TaskSpec)) *MockNatsService_PutTaskSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.TaskSpec))
	})
	return _c
}

func (_c *MockNatsService_PutTaskSpec_Call) Return(_a0 string, _a1 error) *MockNatsService_PutTaskSpec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_PutTaskSpec_Call) RunAndReturn(run func(context.Context, *model.TaskSpec) (string, error)) *MockNatsService_PutTaskSpec_Call {
	_c.Call.Return(run)
	return _c
}

// RecordHistoryActivityComplete provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryActivityComplete(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for RecordHistoryActivityComplete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_RecordHistoryActivityComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordHistoryActivityComplete'
type MockNatsService_RecordHistoryActivityComplete_Call struct {
	*mock.Call
}

// RecordHistoryActivityComplete is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) RecordHistoryActivityComplete(ctx interface{}, state interface{}) *MockNatsService_RecordHistoryActivityComplete_Call {
	return &MockNatsService_RecordHistoryActivityComplete_Call{Call: _e.mock.On("RecordHistoryActivityComplete", ctx, state)}
}

func (_c *MockNatsService_RecordHistoryActivityComplete_Call) Run(run func(ctx context.Context, state *model.WorkflowState)) *MockNatsService_RecordHistoryActivityComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_RecordHistoryActivityComplete_Call) Return(_a0 error) *MockNatsService_RecordHistoryActivityComplete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_RecordHistoryActivityComplete_Call) RunAndReturn(run func(context.Context, *model.WorkflowState) error) *MockNatsService_RecordHistoryActivityComplete_Call {
	_c.Call.Return(run)
	return _c
}

// RecordHistoryActivityExecute provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryActivityExecute(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for RecordHistoryActivityExecute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_RecordHistoryActivityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordHistoryActivityExecute'
type MockNatsService_RecordHistoryActivityExecute_Call struct {
	*mock.Call
}

// RecordHistoryActivityExecute is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) RecordHistoryActivityExecute(ctx interface{}, state interface{}) *MockNatsService_RecordHistoryActivityExecute_Call {
	return &MockNatsService_RecordHistoryActivityExecute_Call{Call: _e.mock.On("RecordHistoryActivityExecute", ctx, state)}
}

func (_c *MockNatsService_RecordHistoryActivityExecute_Call) Run(run func(ctx context.Context, state *model.WorkflowState)) *MockNatsService_RecordHistoryActivityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_RecordHistoryActivityExecute_Call) Return(_a0 error) *MockNatsService_RecordHistoryActivityExecute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_RecordHistoryActivityExecute_Call) RunAndReturn(run func(context.Context, *model.WorkflowState) error) *MockNatsService_RecordHistoryActivityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RecordHistoryProcessAbort provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryProcessAbort(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for RecordHistoryProcessAbort")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_RecordHistoryProcessAbort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordHistoryProcessAbort'
type MockNatsService_RecordHistoryProcessAbort_Call struct {
	*mock.Call
}

// RecordHistoryProcessAbort is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) RecordHistoryProcessAbort(ctx interface{}, state interface{}) *MockNatsService_RecordHistoryProcessAbort_Call {
	return &MockNatsService_RecordHistoryProcessAbort_Call{Call: _e.mock.On("RecordHistoryProcessAbort", ctx, state)}
}

func (_c *MockNatsService_RecordHistoryProcessAbort_Call) Run(run func(ctx context.Context, state *model.WorkflowState)) *MockNatsService_RecordHistoryProcessAbort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_RecordHistoryProcessAbort_Call) Return(_a0 error) *MockNatsService_RecordHistoryProcessAbort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_RecordHistoryProcessAbort_Call) RunAndReturn(run func(context.Context, *model.WorkflowState) error) *MockNatsService_RecordHistoryProcessAbort_Call {
	_c.Call.Return(run)
	return _c
}

// RecordHistoryProcessComplete provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryProcessComplete(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for RecordHistoryProcessComplete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_RecordHistoryProcessComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordHistoryProcessComplete'
type MockNatsService_RecordHistoryProcessComplete_Call struct {
	*mock.Call
}

// RecordHistoryProcessComplete is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) RecordHistoryProcessComplete(ctx interface{}, state interface{}) *MockNatsService_RecordHistoryProcessComplete_Call {
	return &MockNatsService_RecordHistoryProcessComplete_Call{Call: _e.mock.On("RecordHistoryProcessComplete", ctx, state)}
}

func (_c *MockNatsService_RecordHistoryProcessComplete_Call) Run(run func(ctx context.Context, state *model.WorkflowState)) *MockNatsService_RecordHistoryProcessComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_RecordHistoryProcessComplete_Call) Return(_a0 error) *MockNatsService_RecordHistoryProcessComplete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_RecordHistoryProcessComplete_Call) RunAndReturn(run func(context.Context, *model.WorkflowState) error) *MockNatsService_RecordHistoryProcessComplete_Call {
	_c.Call.Return(run)
	return _c
}

// RecordHistoryProcessSpawn provides a mock function with given fields: ctx, state, newProcessInstanceID
func (_m *MockNatsService) RecordHistoryProcessSpawn(ctx context.Context, state *model.WorkflowState, newProcessInstanceID string) error {
	ret := _m.Called(ctx, state, newProcessInstanceID)

	if len(ret) == 0 {
		panic("no return value specified for RecordHistoryProcessSpawn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState, string) error); ok {
		r0 = rf(ctx, state, newProcessInstanceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_RecordHistoryProcessSpawn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordHistoryProcessSpawn'
type MockNatsService_RecordHistoryProcessSpawn_Call struct {
	*mock.Call
}

// RecordHistoryProcessSpawn is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
//   - newProcessInstanceID string
func (_e *MockNatsService_Expecter) RecordHistoryProcessSpawn(ctx interface{}, state interface{}, newProcessInstanceID interface{}) *MockNatsService_RecordHistoryProcessSpawn_Call {
	return &MockNatsService_RecordHistoryProcessSpawn_Call{Call: _e.mock.On("RecordHistoryProcessSpawn", ctx, state, newProcessInstanceID)}
}

func (_c *MockNatsService_RecordHistoryProcessSpawn_Call) Run(run func(ctx context.Context, state *model.WorkflowState, newProcessInstanceID string)) *MockNatsService_RecordHistoryProcessSpawn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState), args[2].(string))
	})
	return _c
}

func (_c *MockNatsService_RecordHistoryProcessSpawn_Call) Return(_a0 error) *MockNatsService_RecordHistoryProcessSpawn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_RecordHistoryProcessSpawn_Call) RunAndReturn(run func(context.Context, *model.WorkflowState, string) error) *MockNatsService_RecordHistoryProcessSpawn_Call {
	_c.Call.Return(run)
	return _c
}

// RecordHistoryProcessStart provides a mock function with given fields: ctx, state
func (_m *MockNatsService) RecordHistoryProcessStart(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for RecordHistoryProcessStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_RecordHistoryProcessStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordHistoryProcessStart'
type MockNatsService_RecordHistoryProcessStart_Call struct {
	*mock.Call
}

// RecordHistoryProcessStart is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) RecordHistoryProcessStart(ctx interface{}, state interface{}) *MockNatsService_RecordHistoryProcessStart_Call {
	return &MockNatsService_RecordHistoryProcessStart_Call{Call: _e.mock.On("RecordHistoryProcessStart", ctx, state)}
}

func (_c *MockNatsService_RecordHistoryProcessStart_Call) Run(run func(ctx context.Context, state *model.WorkflowState)) *MockNatsService_RecordHistoryProcessStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_RecordHistoryProcessStart_Call) Return(_a0 error) *MockNatsService_RecordHistoryProcessStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_RecordHistoryProcessStart_Call) RunAndReturn(run func(context.Context, *model.WorkflowState) error) *MockNatsService_RecordHistoryProcessStart_Call {
	_c.Call.Return(run)
	return _c
}

// SaveState provides a mock function with given fields: ctx, id, state
func (_m *MockNatsService) SaveState(ctx context.Context, id string, state *model.WorkflowState) error {
	ret := _m.Called(ctx, id, state)

	if len(ret) == 0 {
		panic("no return value specified for SaveState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.WorkflowState) error); ok {
		r0 = rf(ctx, id, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_SaveState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveState'
type MockNatsService_SaveState_Call struct {
	*mock.Call
}

// SaveState is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) SaveState(ctx interface{}, id interface{}, state interface{}) *MockNatsService_SaveState_Call {
	return &MockNatsService_SaveState_Call{Call: _e.mock.On("SaveState", ctx, id, state)}
}

func (_c *MockNatsService_SaveState_Call) Run(run func(ctx context.Context, id string, state *model.WorkflowState)) *MockNatsService_SaveState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_SaveState_Call) Return(_a0 error) *MockNatsService_SaveState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_SaveState_Call) RunAndReturn(run func(context.Context, string, *model.WorkflowState) error) *MockNatsService_SaveState_Call {
	_c.Call.Return(run)
	return _c
}

// SetAbort provides a mock function with given fields: processor
func (_m *MockNatsService) SetAbort(processor services.AbortFunc) {
	_m.Called(processor)
}

// MockNatsService_SetAbort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAbort'
type MockNatsService_SetAbort_Call struct {
	*mock.Call
}

// SetAbort is a helper method to define mock.On call
//   - processor services.AbortFunc
func (_e *MockNatsService_Expecter) SetAbort(processor interface{}) *MockNatsService_SetAbort_Call {
	return &MockNatsService_SetAbort_Call{Call: _e.mock.On("SetAbort", processor)}
}

func (_c *MockNatsService_SetAbort_Call) Run(run func(processor services.AbortFunc)) *MockNatsService_SetAbort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.AbortFunc))
	})
	return _c
}

func (_c *MockNatsService_SetAbort_Call) Return() *MockNatsService_SetAbort_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_SetAbort_Call) RunAndReturn(run func(services.AbortFunc)) *MockNatsService_SetAbort_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompleteActivity provides a mock function with given fields: processor
func (_m *MockNatsService) SetCompleteActivity(processor services.CompleteActivityFunc) {
	_m.Called(processor)
}

// MockNatsService_SetCompleteActivity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompleteActivity'
type MockNatsService_SetCompleteActivity_Call struct {
	*mock.Call
}

// SetCompleteActivity is a helper method to define mock.On call
//   - processor services.CompleteActivityFunc
func (_e *MockNatsService_Expecter) SetCompleteActivity(processor interface{}) *MockNatsService_SetCompleteActivity_Call {
	return &MockNatsService_SetCompleteActivity_Call{Call: _e.mock.On("SetCompleteActivity", processor)}
}

func (_c *MockNatsService_SetCompleteActivity_Call) Run(run func(processor services.CompleteActivityFunc)) *MockNatsService_SetCompleteActivity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.CompleteActivityFunc))
	})
	return _c
}

func (_c *MockNatsService_SetCompleteActivity_Call) Return() *MockNatsService_SetCompleteActivity_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_SetCompleteActivity_Call) RunAndReturn(run func(services.CompleteActivityFunc)) *MockNatsService_SetCompleteActivity_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompleteActivityProcessor provides a mock function with given fields: processor
func (_m *MockNatsService) SetCompleteActivityProcessor(processor services.CompleteActivityProcessorFunc) {
	_m.Called(processor)
}

// MockNatsService_SetCompleteActivityProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompleteActivityProcessor'
type MockNatsService_SetCompleteActivityProcessor_Call struct {
	*mock.Call
}

// SetCompleteActivityProcessor is a helper method to define mock.On call
//   - processor services.CompleteActivityProcessorFunc
func (_e *MockNatsService_Expecter) SetCompleteActivityProcessor(processor interface{}) *MockNatsService_SetCompleteActivityProcessor_Call {
	return &MockNatsService_SetCompleteActivityProcessor_Call{Call: _e.mock.On("SetCompleteActivityProcessor", processor)}
}

func (_c *MockNatsService_SetCompleteActivityProcessor_Call) Run(run func(processor services.CompleteActivityProcessorFunc)) *MockNatsService_SetCompleteActivityProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.CompleteActivityProcessorFunc))
	})
	return _c
}

func (_c *MockNatsService_SetCompleteActivityProcessor_Call) Return() *MockNatsService_SetCompleteActivityProcessor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_SetCompleteActivityProcessor_Call) RunAndReturn(run func(services.CompleteActivityProcessorFunc)) *MockNatsService_SetCompleteActivityProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// SetCompleteJobProcessor provides a mock function with given fields: processor
func (_m *MockNatsService) SetCompleteJobProcessor(processor services.CompleteJobProcessorFunc) {
	_m.Called(processor)
}

// MockNatsService_SetCompleteJobProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCompleteJobProcessor'
type MockNatsService_SetCompleteJobProcessor_Call struct {
	*mock.Call
}

// SetCompleteJobProcessor is a helper method to define mock.On call
//   - processor services.CompleteJobProcessorFunc
func (_e *MockNatsService_Expecter) SetCompleteJobProcessor(processor interface{}) *MockNatsService_SetCompleteJobProcessor_Call {
	return &MockNatsService_SetCompleteJobProcessor_Call{Call: _e.mock.On("SetCompleteJobProcessor", processor)}
}

func (_c *MockNatsService_SetCompleteJobProcessor_Call) Run(run func(processor services.CompleteJobProcessorFunc)) *MockNatsService_SetCompleteJobProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.CompleteJobProcessorFunc))
	})
	return _c
}

func (_c *MockNatsService_SetCompleteJobProcessor_Call) Return() *MockNatsService_SetCompleteJobProcessor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_SetCompleteJobProcessor_Call) RunAndReturn(run func(services.CompleteJobProcessorFunc)) *MockNatsService_SetCompleteJobProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// SetEventProcessor provides a mock function with given fields: processor
func (_m *MockNatsService) SetEventProcessor(processor services.EventProcessorFunc) {
	_m.Called(processor)
}

// MockNatsService_SetEventProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEventProcessor'
type MockNatsService_SetEventProcessor_Call struct {
	*mock.Call
}

// SetEventProcessor is a helper method to define mock.On call
//   - processor services.EventProcessorFunc
func (_e *MockNatsService_Expecter) SetEventProcessor(processor interface{}) *MockNatsService_SetEventProcessor_Call {
	return &MockNatsService_SetEventProcessor_Call{Call: _e.mock.On("SetEventProcessor", processor)}
}

func (_c *MockNatsService_SetEventProcessor_Call) Run(run func(processor services.EventProcessorFunc)) *MockNatsService_SetEventProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.EventProcessorFunc))
	})
	return _c
}

func (_c *MockNatsService_SetEventProcessor_Call) Return() *MockNatsService_SetEventProcessor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_SetEventProcessor_Call) RunAndReturn(run func(services.EventProcessorFunc)) *MockNatsService_SetEventProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// SetLaunchFunc provides a mock function with given fields: processor
func (_m *MockNatsService) SetLaunchFunc(processor services.LaunchFunc) {
	_m.Called(processor)
}

// MockNatsService_SetLaunchFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLaunchFunc'
type MockNatsService_SetLaunchFunc_Call struct {
	*mock.Call
}

// SetLaunchFunc is a helper method to define mock.On call
//   - processor services.LaunchFunc
func (_e *MockNatsService_Expecter) SetLaunchFunc(processor interface{}) *MockNatsService_SetLaunchFunc_Call {
	return &MockNatsService_SetLaunchFunc_Call{Call: _e.mock.On("SetLaunchFunc", processor)}
}

func (_c *MockNatsService_SetLaunchFunc_Call) Run(run func(processor services.LaunchFunc)) *MockNatsService_SetLaunchFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.LaunchFunc))
	})
	return _c
}

func (_c *MockNatsService_SetLaunchFunc_Call) Return() *MockNatsService_SetLaunchFunc_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_SetLaunchFunc_Call) RunAndReturn(run func(services.LaunchFunc)) *MockNatsService_SetLaunchFunc_Call {
	_c.Call.Return(run)
	return _c
}

// SetMessageProcessor provides a mock function with given fields: processor
func (_m *MockNatsService) SetMessageProcessor(processor services.MessageProcessorFunc) {
	_m.Called(processor)
}

// MockNatsService_SetMessageProcessor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMessageProcessor'
type MockNatsService_SetMessageProcessor_Call struct {
	*mock.Call
}

// SetMessageProcessor is a helper method to define mock.On call
//   - processor services.MessageProcessorFunc
func (_e *MockNatsService_Expecter) SetMessageProcessor(processor interface{}) *MockNatsService_SetMessageProcessor_Call {
	return &MockNatsService_SetMessageProcessor_Call{Call: _e.mock.On("SetMessageProcessor", processor)}
}

func (_c *MockNatsService_SetMessageProcessor_Call) Run(run func(processor services.MessageProcessorFunc)) *MockNatsService_SetMessageProcessor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.MessageProcessorFunc))
	})
	return _c
}

func (_c *MockNatsService_SetMessageProcessor_Call) Return() *MockNatsService_SetMessageProcessor_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_SetMessageProcessor_Call) RunAndReturn(run func(services.MessageProcessorFunc)) *MockNatsService_SetMessageProcessor_Call {
	_c.Call.Return(run)
	return _c
}

// SetTraversalProvider provides a mock function with given fields: provider
func (_m *MockNatsService) SetTraversalProvider(provider services.TraversalFunc) {
	_m.Called(provider)
}

// MockNatsService_SetTraversalProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTraversalProvider'
type MockNatsService_SetTraversalProvider_Call struct {
	*mock.Call
}

// SetTraversalProvider is a helper method to define mock.On call
//   - provider services.TraversalFunc
func (_e *MockNatsService_Expecter) SetTraversalProvider(provider interface{}) *MockNatsService_SetTraversalProvider_Call {
	return &MockNatsService_SetTraversalProvider_Call{Call: _e.mock.On("SetTraversalProvider", provider)}
}

func (_c *MockNatsService_SetTraversalProvider_Call) Run(run func(provider services.TraversalFunc)) *MockNatsService_SetTraversalProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.TraversalFunc))
	})
	return _c
}

func (_c *MockNatsService_SetTraversalProvider_Call) Return() *MockNatsService_SetTraversalProvider_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_SetTraversalProvider_Call) RunAndReturn(run func(services.TraversalFunc)) *MockNatsService_SetTraversalProvider_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields:
func (_m *MockNatsService) Shutdown() {
	_m.Called()
}

// MockNatsService_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type MockNatsService_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
func (_e *MockNatsService_Expecter) Shutdown() *MockNatsService_Shutdown_Call {
	return &MockNatsService_Shutdown_Call{Call: _e.mock.On("Shutdown")}
}

func (_c *MockNatsService_Shutdown_Call) Run(run func()) *MockNatsService_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNatsService_Shutdown_Call) Return() *MockNatsService_Shutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNatsService_Shutdown_Call) RunAndReturn(run func()) *MockNatsService_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// StartProcessing provides a mock function with given fields: ctx
func (_m *MockNatsService) StartProcessing(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartProcessing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_StartProcessing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartProcessing'
type MockNatsService_StartProcessing_Call struct {
	*mock.Call
}

// StartProcessing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNatsService_Expecter) StartProcessing(ctx interface{}) *MockNatsService_StartProcessing_Call {
	return &MockNatsService_StartProcessing_Call{Call: _e.mock.On("StartProcessing", ctx)}
}

func (_c *MockNatsService_StartProcessing_Call) Run(run func(ctx context.Context)) *MockNatsService_StartProcessing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNatsService_StartProcessing_Call) Return(_a0 error) *MockNatsService_StartProcessing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_StartProcessing_Call) RunAndReturn(run func(context.Context) error) *MockNatsService_StartProcessing_Call {
	_c.Call.Return(run)
	return _c
}

// StoreWorkflow provides a mock function with given fields: ctx, wf
func (_m *MockNatsService) StoreWorkflow(ctx context.Context, wf *model.Workflow) (string, error) {
	ret := _m.Called(ctx, wf)

	if len(ret) == 0 {
		panic("no return value specified for StoreWorkflow")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Workflow) (string, error)); ok {
		return rf(ctx, wf)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Workflow) string); ok {
		r0 = rf(ctx, wf)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Workflow) error); ok {
		r1 = rf(ctx, wf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNatsService_StoreWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreWorkflow'
type MockNatsService_StoreWorkflow_Call struct {
	*mock.Call
}

// StoreWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - wf *model.Workflow
func (_e *MockNatsService_Expecter) StoreWorkflow(ctx interface{}, wf interface{}) *MockNatsService_StoreWorkflow_Call {
	return &MockNatsService_StoreWorkflow_Call{Call: _e.mock.On("StoreWorkflow", ctx, wf)}
}

func (_c *MockNatsService_StoreWorkflow_Call) Run(run func(ctx context.Context, wf *model.Workflow)) *MockNatsService_StoreWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Workflow))
	})
	return _c
}

func (_c *MockNatsService_StoreWorkflow_Call) Return(_a0 string, _a1 error) *MockNatsService_StoreWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNatsService_StoreWorkflow_Call) RunAndReturn(run func(context.Context, *model.Workflow) (string, error)) *MockNatsService_StoreWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// XDestroyProcessInstance provides a mock function with given fields: ctx, state
func (_m *MockNatsService) XDestroyProcessInstance(ctx context.Context, state *model.WorkflowState) error {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for XDestroyProcessInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.WorkflowState) error); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNatsService_XDestroyProcessInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'XDestroyProcessInstance'
type MockNatsService_XDestroyProcessInstance_Call struct {
	*mock.Call
}

// XDestroyProcessInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - state *model.WorkflowState
func (_e *MockNatsService_Expecter) XDestroyProcessInstance(ctx interface{}, state interface{}) *MockNatsService_XDestroyProcessInstance_Call {
	return &MockNatsService_XDestroyProcessInstance_Call{Call: _e.mock.On("XDestroyProcessInstance", ctx, state)}
}

func (_c *MockNatsService_XDestroyProcessInstance_Call) Run(run func(ctx context.Context, state *model.WorkflowState)) *MockNatsService_XDestroyProcessInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.WorkflowState))
	})
	return _c
}

func (_c *MockNatsService_XDestroyProcessInstance_Call) Return(_a0 error) *MockNatsService_XDestroyProcessInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNatsService_XDestroyProcessInstance_Call) RunAndReturn(run func(context.Context, *model.WorkflowState) error) *MockNatsService_XDestroyProcessInstance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNatsService creates a new instance of MockNatsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNatsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNatsService {
	mock := &MockNatsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
