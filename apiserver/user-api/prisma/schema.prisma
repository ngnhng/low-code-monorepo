// This is your Prisma schema file,
// * [NOTE]: To view table mode, go to prismaliser.app
// * [NOTE]: To migrate to database, run `npx prisma migrate dev` - maybe can be added to script to run with docker up/down
// * [NOTE]: To view database, run `npx prisma studio`

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int    @id @default(autoincrement())
  uuid      String @unique @default(uuid())
  lastName  String
  firstName String
  email     String @unique

  // provider ThirdParty?

  projects Project[]
  // businessProcesses BusinessProcess[]
  // connections       ConnectionConfiguration[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

// model ThirdParty {
//   id                   Int      @id @default(autoincrement())
//   provider             String
//   provider_id          String   @unique @default(uuid()) // consider remove
//   accessToken          String
//   user                 User     @relation(fields: [userId], references: [uuid])
//   userId               String   @unique
//   accessTokenExpiredAt DateTime
// }

model Project {
  id    Int    @id @default(autoincrement())
  title String
  view  Json

  user   User   @relation(fields: [userId], references: [uuid])
  userId String

  // businessProcesses ProcessesOfProjects[]
  // connections       ConnectionsOnProjects[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

// model BusinessProcess {
//   id    Int    @id @default(autoincrement())
//   title String
//   view  Json

//   user   User   @relation(fields: [userId], references: [uuid])
//   userId String

//   projects ProcessesOfProjects[]

//   createAt DateTime @default(now())
//   updateAt DateTime @updatedAt
// }

// model ProcessesOfProjects {
//   project   Project         @relation(fields: [projectId], references: [id])
//   projectId Int
//   process   BusinessProcess @relation(fields: [processId], references: [id])
//   processId Int

//   @@id([projectId, processId])
// }

// model ExternalDatasource {
//   id           Int    @id @default(autoincrement())
//   databaseName String

//   connections ConnectionConfiguration[]
// }

// model ConnectionConfiguration {
//   id   Int    @id @default(autoincrement())
//   name String

//   type String

//   // as localhost/etc
//   host         String
//   port         String
//   DatabaseName String
//   Username     String
//   Password     String

//   // other
//   connectionString String

//   permission String

//   user                User                    @relation(fields: [userId], references: [uuid])
//   userId              String
//   exeternalDatasource ExternalDatasource      @relation(fields: [exDatasourceId], references: [id])
//   exDatasourceId      Int
//   projects            ConnectionsOnProjects[]
// }

// model ConnectionsOnProjects {
//   project      Project                 @relation(fields: [projectId], references: [id])
//   projectId    Int
//   connection   ConnectionConfiguration @relation(fields: [connectionId], references: [id])
//   connectionId Int

//   @@id([projectId, connectionId])
// }

// ! Consider models
// model Component {

// }

// model BusinessLogic {

// }

// model Configuration {

// }
