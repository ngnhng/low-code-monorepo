version: "3.8"

networks:
    dev-network:
        driver: bridge

volumes:
    user-data:
    table-data:
    token-cache-data:
    monitoring:

services:
    reverse-proxy:
        # The official v2 Traefik docker image
        image: traefik:v2.10
        # Enables the web UI and tells Traefik to listen to docker
        command:
            - "--api.insecure=true"
            - "--providers.docker"
            - "--entrypoints.web.address=:80"
            - "--accesslog=true"
            - "--metrics.prometheus=true"
            - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
            - "--providers.docker=true"
            - "--providers.docker.watch"

        ports:
            # The HTTP port
            - "80:80"
            # The Web UI (enabled by --api.insecure=true)
            - "8080:8080"
        networks:
            - dev-network
        volumes:
            # So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock

        logging:
            options:
                max-size: "10m"
                max-file: "3"

    auth-api:
        build:
            context: ../../apiserver/auth-api
            dockerfile: Dockerfile.dev
        networks:
            - dev-network
        depends_on:
            reverse-proxy:
                condition: service_started
            token-cache:
                condition: service_healthy
        env_file:
            - ./.env

        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.auth-api.rule=Host(`localhost`) && PathPrefix(`/auth-api`)"
            - "traefik.http.routers.auth-api.entrypoints=web"
            - "traefik.http.middlewares.auth-api-stripprefix.stripprefix.prefixes=/auth-api"
            - "traefik.http.routers.auth-api.middlewares=auth-api-stripprefix@docker"

    token-cache:
        build:
            context: ../../apiserver/infra/redis
            dockerfile: Dockerfile.dev
        networks:
            - dev-network
        volumes:
            - token-cache-data:/var/lib/redis/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 5s

    user-api:
        build:
            context: ../../apiserver/user-api
            dockerfile: Dockerfile.dev
        networks:
            - dev-network
        volumes:
            - ../../apiserver/user-api:/app
            - /app/node_modules # exclude node_modules from the volume
        depends_on:
            reverse-proxy:
                condition: service_started
            auth-api:
                condition: service_started
            # user-db:
            #   condition: service_healthy
        env_file:
            - ./.env

        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.user-api.rule=Host(`localhost`) && PathPrefix(`/user-api`)"
            - "traefik.http.routers.user-api.entrypoints=web"
            - "traefik.http.middlewares.user-api-forwardauth.forwardauth.address=http://auth-api:3000/api/v1/validate/token"
            - "traefik.http.middlewares.user-api-stripprefix.stripprefix.prefixes=/user-api"
            - "traefik.http.routers.user-api.middlewares=user-api-stripprefix@docker,user-api-forwardauth@docker"

    table-api:
        build:
            context: ../../apiserver/table-api/app
            dockerfile: Dockerfile
        networks:
            - dev-network
        env_file:
            - ./.env
        depends_on:
            reverse-proxy:
                condition: service_started
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.table-api.rule=Host(`localhost`) && PathPrefix(`/dbms`)"
            - "traefik.http.routers.table-api.entrypoints=web"
            - "traefik.http.middlewares.table-api-forwardauth.forwardauth.address=http://auth-api:3000/api/v1/validate/token"
            - "traefik.http.middlewares.table-api-stripprefix.stripprefix.prefixes=/dbms"
            - "traefik.http.routers.table-api.middlewares=table-api-stripprefix@docker,table-api-forwardauth@docker"

    workflow:
        build:
            context: ../../apiserver/bpmn-engine
            dockerfile: Dockerfile.dev
        networks:
            - dev-network
        depends_on:
            reverse-proxy:
                condition: service_started
            shar-server:
                condition: service_started
        env_file:
            - ./.env
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.workflow.rule=Host(`localhost`) && PathPrefix(`/workflow`)"
            - "traefik.http.routers.workflow.entrypoints=web"
            - "traefik.http.middlewares.workflow-stripprefix.stripprefix.prefixes=/workflow"
            - "traefik.http.routers.workflow.middlewares=workflow-stripprefix@docker"

    nats:
        image: nats:2.10-alpine3.19
        networks:
            - dev-network
        ports:
            - "4222:4222"
            - "6222:6222"
            - "8222:8222"
        command:
            - "--js"
            - "--server_name"
            - "nats"
            - "-m"
            - "8222"

    shar-server:
        image: registry.gitlab.com/shar-workflow/shar/dev/server:1.1.876
        networks:
            - dev-network
        environment:
            - NATS_URL=nats://nats:4222
        depends_on:
            nats:
                condition: service_started
        labels:
            - "traefik.enable=false"
        cpus: "0.25"

    #prometheus:
    #    image: prom/prometheus:v2.52.0
    #    container_name: prometheus
    #    #ports:
    #    #- 9090:9090
    #    command:
    #        - "--config.file=/etc/prometheus/prometheus.yaml"
    #        - "--storage.tsdb.path=/prometheus"
    #        - "--storage.tsdb.retention.size=256MB"
    #    volumes:
    #        - ./prometheus.yaml:/etc/prometheus/prometheus.yaml:ro

    #    networks:
    #        - dev-network

    #    labels:
    #        - "traefik.enable=true"
    #        - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
    #        - "traefik.http.routers.prometheus.entrypoints=web"
    #        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

    #grafana:
    #    image: grafana/grafana-oss:10.4.2
    #    container_name: grafana
    #    #ports:
    #    #    - "3000:3000"
    #    volumes:
    #        - monitoring:/var/lib/grafana
    #    networks:
    #        - dev-network
    #    #password: root123
    #    labels:
    #        - "traefik.enable=true"
    #        - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
    #        - "traefik.http.routers.grafana.entrypoints=web"
    #        - "traefik.http.services.grafana.loadbalancer.server.port=3000"

    #node_exporter:
    #    image: quay.io/prometheus/node-exporter:v1.5.0
    #    container_name: node_exporter
    #    command: "--path.rootfs=/host"
    #    pid: host
    #    volumes:
    #        - /:/host:ro,rslave
    #    networks:
    #        - dev-network

    #cadvisor:
    #    image: gcr.io/cadvisor/cadvisor:v0.47.0
    #    container_name: cadvisor
    #    command:
    #        - "-port=8098"
    #    volumes:
    #        - /:/rootfs:ro
    #        - /var/run:/var/run:ro
    #        - /sys:/sys:ro
    #        - /var/lib/docker/:/var/lib/docker:ro
    #        - /dev/disk/:/dev/disk:ro
    #    devices:
    #        - /dev/kmsg
    #    privileged: true
    #    networks:
    #        - dev-network
