version: "3.8"

networks:
    traefik-network:
        driver: bridge

volumes:
    user-data:
    #table-data:
    token-cache-data:

services:
    yalc-reverse-proxy:
        # The official v2 Traefik docker image
        image: traefik:v2.10
        # Enables the web UI and tells Traefik to listen to docker
        command:
            #- "--log.level=DEBUG"
            - "--providers.docker=true"
            - "--providers.docker.watch"
            - "--providers.docker.exposedbydefault=false"
            - "--entrypoints.web.address=:80"
            - "--entrypoints.websecure.address=:443"
            - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
            - "--entrypoints.web.http.redirections.entryPoint.scheme=https"

            - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
            #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
            - "--certificatesresolvers.myresolver.acme.email=mountngubinh@gmail.com"
            - "--certificatesresolvers.myresolver.acme.storage=/certificates/acme.json"

            - "--api.dashboard=true"
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.dashboard.rule=Host(`dashboard.yalc.live`)"
            - "traefik.http.routers.dashboard.entrypoints=websecure"
            - "traefik.http.routers.dashboard.service=api@internal"
            - "traefik.http.routers.dashboard.tls=true"
            - "traefik.http.routers.dashboard.tls.certresolver=myresolver"
            - "traefik.http.routers.dashboard.middlewares=auth"
            - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$05$$EBozzs8Ojtir8qAuUj1FFekGMsNA3wk9MtgvDyG33X2UIkqQfJIuq"
            - "metrics.prometheus=true"
            - "metrics.prometheus.buckets=0.1,0.3,1.2,5.0"

        ports:
            - "443:443"
            # The Web UI (enabled by --api.insecure=true)
            - "8080:8080"
        networks:
            - traefik-network
        volumes:
            - ./certificates:/certificates
            # So that Traefik can listen to the Docker events
            - /var/run/docker.sock:/var/run/docker.sock

    yalc-auth-api:
        image: "ghcr.io/nguyendhst/low-code-monorepo/auth-api:latest"
        networks:
            - traefik-network
        depends_on:
            yalc-reverse-proxy:
                condition: service_started
            yalc-token-cache:
                condition: service_healthy
        env_file:
            - ./.env

        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.auth-api.rule=Host(`auth.yalc.live`)"
            - "traefik.http.routers.auth-api.entrypoints=websecure"
            - "traefik.http.routers.auth-api.tls.certresolver=myresolver"

    yalc-token-cache:
        image: "redis:7-alpine"
        networks:
            - traefik-network
        volumes:
            - token-cache-data:/var/lib/redis/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 5s
        environment:
            - REDIS_PASSWORD=redis

    yalc-user-api:
        image: "ghcr.io/nguyendhst/low-code-monorepo/user-api:latest"
        networks:
            - traefik-network
        depends_on:
            yalc-auth-api:
                condition: service_started
            yalc-reverse-proxy:
                condition: service_started
            yalc-user-db:
                condition: service_healthy
        env_file:
            - ./.env

        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.user-api.rule=Host(`user.yalc.live`)"
            - "traefik.http.routers.user-api.entrypoints=websecure"
            - "traefik.http.routers.user-api.tls.certresolver=myresolver"
            - "traefik.http.middlewares.user-api-forwardauth.forwardauth.address=http://yalc-auth-api:3000"
            - "traefik.http.routers.user-api.middlewares=user-api-forwardauth@docker"

    yalc-dbms-api:
        image: "ghcr.io/nguyendhst/low-code-monorepo/dbms-api:latest"
        networks:
            - traefik-network
        depends_on:
            yalc-reverse-proxy:
                condition: service_started
        env_file:
            - ./.env
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.table-api.rule=Host(`table.yalc.live`)"
            - "traefik.http.routers.table-api.entrypoints=websecure"
            - "traefik.http.routers.table-api.tls.certresolver=myresolver"
            - "traefik.http.middlewares.table-api-forwardauth.forwardauth.address=https://auth.yalc.live"
            - "traefik.http.routers.table-api.middlewares=table-api-forwardauth@docker"

    workflow:
        image: "ghcr.io/nguyendhst/low-code-monorepo/workflow:latest"
        networks:
            - traefik-network
        depends_on:
            reverse-proxy:
                condition: service_started
            shar-server:
                condition: service_started
        env_file:
            - ./.env
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.workflow.rule=Host(`workflow.yalc.live`)"
            - "traefik.http.routers.workflow.entrypoints=websecure"
            - "traefik.http.routers.workflow.tls.certresolver=myresolver"
            - "traefik.http.middlewares.workflow-forwardauth.forwardauth.address=https://auth.yalc.live"
            - "traefik.http.routers.workflow.middlewares=workflow-forwardauth@docker"

    nats:
        image: nats:2.10-alpine3.19
        networks:
            - traefik-network
        ports:
            - "4222:4222"
            - "6222:6222"
            - "8222:8222"
        command:
            - "--js"
            - "--server_name"
            - "nats"
            - "-m"
            - "8222"

    shar-server:
        image: registry.gitlab.com/shar-workflow/shar/dev/server:1.1.876
        networks:
            - traefik-network
        environment:
            - NATS_URL=nats://nats:4222
        depends_on:
            nats:
                condition: service_started
        labels:
            - "traefik.enable=false"
        cpus: "0.25"

    prometheus:
        image: prom/prometheus:v2.52.0
        container_name: prometheus
        #ports:
        #- 9090:9090
        command:
            - "--config.file=/etc/prometheus/prometheus.yaml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.size=256MB"
        volumes:
            - ./prometheus.prod.yaml:/etc/prometheus/prometheus.yaml:ro

        networks:
            - dev-network

        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
            - "traefik.http.routers.prometheus.entrypoints=websecure"
            - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

    grafana:
        image: grafana/grafana-oss:10.4.2
        container_name: grafana
        #ports:
        #    - "3000:3000"
        volumes:
            - monitoring:/var/lib/grafana
        networks:
            - dev-network
        #password: root123
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
            - "traefik.http.routers.grafana.entrypoints=web"
            - "traefik.http.services.grafana.loadbalancer.server.port=3000"
